define(["require", "exports", "./model/ProjectModel", "./model/ProgressIndicator"], function (require, exports, ProjectModel_1, ProgressIndicator_1) {
    function normalizePackageJsonUrl(inputUrl) {
        var pathname = null;
        if (inputUrl.indexOf("git@github.com") === 0) {
            pathname = "/" + inputUrl.substring(inputUrl.indexOf(":") + 1, inputUrl.length - 4);
        }
        else {
            var parser = document.createElement('a');
            parser.href = inputUrl;
            pathname = parser.pathname;
            if (parser.host === "raw.githubusercontent.com") {
                return inputUrl;
            }
            if (parser.host === "github.com") {
                var pathSegments = pathname.split("/");
                if (pathSegments.length >= 4 && pathSegments[3] == "blob") {
                    pathname = "/" + pathSegments[1] + "/" + pathSegments[2];
                }
            }
            else {
                return inputUrl;
            }
        }
        if (pathname.substring(pathname.length - 4) === ".git") {
            pathname = pathname.substring(0, pathname.length - 4);
        }
        if (pathname.charAt(pathname.length - 1) == "/") {
            pathname = pathname.substring(0, pathname.length - 1);
        }
        if (pathname == null) {
            return null;
        }
        return "https://raw.githubusercontent.com" + pathname + "/master/package.json";
    }
    exports.normalizePackageJsonUrl = normalizePackageJsonUrl;
    var AppInitProcess = (function () {
        function AppInitProcess(rawPackageJson, url) {
            this.rawPackageJson = rawPackageJson;
            this.url = url;
            this.initListeners = [];
        }
        AppInitProcess.startWithUrl = function (url) {
            return new AppInitProcess(null, normalizePackageJsonUrl(url));
        };
        AppInitProcess.startWithPackageJson = function (rawPackageJson) {
            return new AppInitProcess(rawPackageJson, null);
        };
        AppInitProcess.prototype.parsePackageJson = function (success, reject, rawPackageJson) {
            try {
                if (_.isString(rawPackageJson)) {
                    success(JSON.parse(rawPackageJson));
                }
                else {
                    success(rawPackageJson);
                }
            }
            catch (e) {
                this.onFailure("Syntax error: this is not a valid package.json file");
                reject(rawPackageJson);
            }
        };
        AppInitProcess.prototype.obtainPackageJson = function () {
            var _this = this;
            if (this.rawPackageJson == null) {
                var success, reject;
                var rval = new Promise(function (succ, rej) {
                    success = succ;
                    reject = rej;
                });
                $.getJSON(this.url).then(function (rawPackageJson) {
                    _this.parsePackageJson(success, reject, rawPackageJson);
                }).fail(reject);
                return rval;
            }
            else {
                return new Promise(function (success, reject) {
                    _this.parsePackageJson(success, reject, _this.rawPackageJson);
                });
            }
        };
        AppInitProcess.prototype.init = function () {
            var _this = this;
            var resolver = function (success, reject) {
                _this.onSuccess = success;
                _this.onFailure = reject;
            };
            var rval = new Promise(resolver);
            this.obtainPackageJson().then(function (packageJson) {
                if (!(packageJson.name && packageJson.version)) {
                    _this.onFailure("Please provide a package.json with a name and a version");
                    return;
                }
                var hasDeps = _.isObject(packageJson.dependencies) && !_.isEmpty(packageJson.dependencies);
                var hasDevDeps = _.isObject(packageJson.devDependencies) && !_.isEmpty(packageJson.devDependencies);
                if (!(hasDeps || hasDevDeps)) {
                    _this.onFailure("Please provide a package.json with at least one dependency");
                    return;
                }
                var depCount = _.size(packageJson.dependencies) + _.size(packageJson.devDependencies);
                var progress = new ProgressIndicator_1.ProgressIndicatorImpl(depCount, 5);
                _this.initListeners.forEach(function (listener) { return listener.npmFetchStarted(progress); });
                ProjectModel_1.default.createForPackageJson(packageJson, progress).then(_this.projectLoaded.bind(_this));
            }).catch(function (e) { return console.log(e); });
            return rval;
        };
        AppInitProcess.prototype.projectLoaded = function (project) {
            this.initListeners.forEach(function (listener) { return listener.npmFetchFinished(project); });
        };
        AppInitProcess.prototype.addInitListener = function (listener) {
            this.initListeners.push(listener);
            return this;
        };
        return AppInitProcess;
    })();
    exports.AppInitProcess = AppInitProcess;
});

//# sourceMappingURL=data:application/json;base64,
