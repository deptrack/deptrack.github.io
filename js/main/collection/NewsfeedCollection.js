var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports", "backbone", "../model/NewsfeedEntryModel", "../model/toPromise", "../model/PromiseCompletion"], function (require, exports, Backbone, NewsfeedEntryModel_1, toPromise_1, PromiseCompletion_1) {
    /// <amd-dependency path="promise" />
    function nonNull(arg) {
        return arg !== null;
    }
    var NewsfeedCollection = (function (_super) {
        __extends(NewsfeedCollection, _super);
        function NewsfeedCollection(allEntries, pageSize) {
            if (pageSize === void 0) { pageSize = 10; }
            _super.call(this, []);
            this.pageSize = pageSize;
            this.visibleEntryCount = 0;
            this.visibleEntryCount = pageSize;
            this.allEntries = allEntries.sort(function (a, b) { return b.createdAt.toDate().getTime() - a.createdAt.toDate().getTime(); });
            this.reset(this.allEntries);
        }
        NewsfeedCollection.createFor = function (deps) {
            var depsByName = _.indexBy(deps, function (dep) { return dep.gitUrl; });
            function depByName(name) {
                var rval = _.find(deps, function (e) {
                    return e.gitUrl.indexOf(name) > -1;
                });
                if (!rval)
                    console.log("could not found dep by name [" + name + "]");
                return rval;
            }
            var requestPromises = _.chain(deps)
                .map(function (dep) { return dep.githubEventsUrl; })
                .filter(nonNull)
                .map(function (url) { return $.getJSON(url); })
                .map(function (xhr) { return toPromise_1.default(xhr); })
                .value();
            return PromiseCompletion_1.default.waitFor(requestPromises)
                .catch(function (errors) { return console.log(errors); })
                .then(function (rawEvents) { return _.chain(rawEvents)
                .flatten(true)
                .map(function (json) { return NewsfeedEntryModel_1.NewsfeedEntryModel.forRawJson(json, depByName(json.repo.name)); })
                .filter(nonNull)
                .value(); })
                .then(function (entries) { return new NewsfeedCollection(entries); });
        };
        Object.defineProperty(NewsfeedCollection.prototype, "visibleEntries", {
            get: function () {
                return this.allEntries.slice(0, Math.min(this.visibleEntryCount, this.allEntries.length));
            },
            enumerable: true,
            configurable: true
        });
        ;
        NewsfeedCollection.prototype.nextPage = function () {
            var args = this.allEntries.slice(this.visibleEntryCount, this.visibleEntryCount += this.pageSize);
            this.trigger("pageShown", args);
        };
        return NewsfeedCollection;
    })(Backbone.Collection);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = NewsfeedCollection;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4vY29sbGVjdGlvbi9OZXdzZmVlZENvbGxlY3Rpb24udHMiXSwibmFtZXMiOlsibm9uTnVsbCIsIk5ld3NmZWVkQ29sbGVjdGlvbiIsIk5ld3NmZWVkQ29sbGVjdGlvbi5jb25zdHJ1Y3RvciIsIk5ld3NmZWVkQ29sbGVjdGlvbi5jcmVhdGVGb3IiLCJOZXdzZmVlZENvbGxlY3Rpb24uY3JlYXRlRm9yLmRlcEJ5TmFtZSIsIk5ld3NmZWVkQ29sbGVjdGlvbi52aXNpYmxlRW50cmllcyIsIk5ld3NmZWVkQ29sbGVjdGlvbi5uZXh0UGFnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0lBS0EscUNBQXFDO0lBRXJDLGlCQUFpQixHQUFHO1FBQ2xCQSxNQUFNQSxDQUFDQSxHQUFHQSxLQUFLQSxJQUFJQSxDQUFDQTtJQUN0QkEsQ0FBQ0E7SUFFRDtRQUFnREMsc0NBQXVDQTtRQW1DckZBLDRCQUFZQSxVQUFnQ0EsRUFDaENBLFFBQXFCQTtZQUE3QkMsd0JBQTZCQSxHQUE3QkEsYUFBNkJBO1lBQy9CQSxrQkFBTUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFEQUEsYUFBUUEsR0FBUkEsUUFBUUEsQ0FBYUE7WUFQekJBLHNCQUFpQkEsR0FBV0EsQ0FBQ0EsQ0FBQ0E7WUFTcENBLElBQUlBLENBQUNBLGlCQUFpQkEsR0FBR0EsUUFBUUEsQ0FBQ0E7WUFDbENBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLFVBQUNBLENBQUNBLEVBQUVBLENBQUNBLElBQU1BLE9BQUFBLENBQUNBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLE9BQU9BLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLE9BQU9BLEVBQUVBLEVBQS9EQSxDQUErREEsQ0FBQ0EsQ0FBQ0E7WUFDOUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1FB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SUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxJQUFJQSxDQUFDQSxpQkFBaUJBLElBQUlBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQ3BHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNsQ0EsQ0FBQ0E7UUFFSEwseUJBQUNBO0lBQURBLENBaERBLEFBZ0RDQSxFQWhEK0MsUUFBUSxDQUFDLFVBQVUsRUFnRGxFO0lBaEREO3dDQWdEQyxDQUFBIiwiZmlsZSI6Im1haW4vY29sbGVjdGlvbi9OZXdzZmVlZENvbGxlY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFja2JvbmUgPSByZXF1aXJlKFwiYmFja2JvbmVcIik7XG5pbXBvcnQgeyBOZXdzZmVlZEVudHJ5TW9kZWwgfSBmcm9tIFwiLi4vbW9kZWwvTmV3c2ZlZWRFbnRyeU1vZGVsXCI7XG5pbXBvcnQgRGVwZW5kZW5jeU1vZGVsIGZyb20gXCIuLi9tb2RlbC9EZXBlbmRlbmN5TW9kZWxcIjtcbmltcG9ydCB0b1Byb21pc2UgZnJvbSBcIi4uL21vZGVsL3RvUHJvbWlzZVwiO1xuaW1wb3J0IFByb21pc2VDb21wbGV0aW9uIGZyb20gXCIuLi9tb2RlbC9Qcm9taXNlQ29tcGxldGlvblwiXG4vLy8gPGFtZC1kZXBlbmRlbmN5IHBhdGg9XCJwcm9taXNlXCIgLz5cblxuZnVuY3Rpb24gbm9uTnVsbChhcmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGFyZyAhPT0gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV3c2ZlZWRDb2xsZWN0aW9uIGV4dGVuZHMgQmFja2JvbmUuQ29sbGVjdGlvbjxOZXdzZmVlZEVudHJ5TW9kZWw+IHtcblxuICBzdGF0aWMgY3JlYXRlRm9yKGRlcHM6IERlcGVuZGVuY3lNb2RlbFtdKTogUHJvbWlzZS5JVGhlbmFibGU8TmV3c2ZlZWRDb2xsZWN0aW9uPiB7XG4gICAgY29uc3QgZGVwc0J5TmFtZSA9IF8uaW5kZXhCeShkZXBzLCBkZXAgPT4gZGVwLmdpdFVybCk7XG4gICAgZnVuY3Rpb24gZGVwQnlOYW1lKG5hbWU6IHN0cmluZyk6IERlcGVuZGVuY3lNb2RlbCB7XG4gICAgICBjb25zdCBydmFsID0gIF8uZmluZChkZXBzLCBlID0+IHtcbiAgICAgICAgcmV0dXJuIGUuZ2l0VXJsLmluZGV4T2YobmFtZSkgPiAtMTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFydmFsKSBjb25zb2xlLmxvZyhcImNvdWxkIG5vdCBmb3VuZCBkZXAgYnkgbmFtZSBbXCIgKyBuYW1lICsgXCJdXCIpXG4gICAgICByZXR1cm4gcnZhbDtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdFByb21pc2VzOiBQcm9taXNlLklUaGVuYWJsZTxhbnk+W10gPSBfLmNoYWluKGRlcHMpXG4gICAgICAubWFwKGRlcCA9PiAgZGVwLmdpdGh1YkV2ZW50c1VybClcbiAgICAgIC5maWx0ZXIobm9uTnVsbClcbiAgICAgIC5tYXAodXJsID0+ICQuZ2V0SlNPTih1cmwpKVxuICAgICAgLm1hcCh4aHIgPT4gdG9Qcm9taXNlKHhocikpXG4gICAgICAudmFsdWUoKTtcbiAgICByZXR1cm4gUHJvbWlzZUNvbXBsZXRpb24ud2FpdEZvcihyZXF1ZXN0UHJvbWlzZXMpXG4gICAgICAuY2F0Y2goZXJyb3JzID0+IGNvbnNvbGUubG9nKGVycm9ycykpXG4gICAgICAudGhlbihyYXdFdmVudHMgPT4gXy5jaGFpbihyYXdFdmVudHMpXG4gICAgICAgIC5mbGF0dGVuKHRydWUpXG4gICAgICAgIC5tYXAoanNvbiA9PiBOZXdzZmVlZEVudHJ5TW9kZWwuZm9yUmF3SnNvbihqc29uLCBkZXBCeU5hbWUoanNvbi5yZXBvLm5hbWUpKSlcbiAgICAgICAgLmZpbHRlcihub25OdWxsKVxuICAgICAgICAudmFsdWUoKSlcbiAgICAgIC50aGVuKGVudHJpZXMgPT4gbmV3IE5ld3NmZWVkQ29sbGVjdGlvbihlbnRyaWVzKSk7XG4gIH1cblxuICBwdWJsaWMgYWxsRW50cmllczogTmV3c2ZlZWRFbnRyeU1vZGVsW107XG5cbiAgcHJpdmF0ZSB2aXNpYmxlRW50cnlDb3VudDogbnVtYmVyID0gMDtcblxuICBwdWJsaWMgZ2V0IHZpc2libGVFbnRyaWVzKCk6IE5ld3NmZWVkRW50cnlNb2RlbFtdIHtcbiAgICByZXR1cm4gdGhpcy5hbGxFbnRyaWVzLnNsaWNlKDAsIE1hdGgubWluKHRoaXMudmlzaWJsZUVudHJ5Q291bnQsIHRoaXMuYWxsRW50cmllcy5sZW5ndGgpKTtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihhbGxFbnRyaWVzOiBOZXdzZmVlZEVudHJ5TW9kZWxbXSxcbiAgICAgIHByaXZhdGUgcGFnZVNpemU6IG51bWJlciA9IDEwKSB7XG4gICAgc3VwZXIoW10pO1xuICAgIHRoaXMudmlzaWJsZUVudHJ5Q291bnQgPSBwYWdlU2l6ZTtcbiAgICB0aGlzLmFsbEVudHJpZXMgPSBhbGxFbnRyaWVzLnNvcnQoKGEsIGIpID0+ICBiLmNyZWF0ZWRBdC50b0RhdGUoKS5nZXRUaW1lKCkgLSBhLmNyZWF0ZWRBdC50b0RhdGUoKS5nZXRUaW1lKCkpO1xuICAgIHRoaXMucmVzZXQodGhpcy5hbGxFbnRyaWVzKTtcbiAgfVxuXG4gIHB1YmxpYyBuZXh0UGFnZSgpOiB2b2lkIHtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5hbGxFbnRyaWVzLnNsaWNlKHRoaXMudmlzaWJsZUVudHJ5Q291bnQsIHRoaXMudmlzaWJsZUVudHJ5Q291bnQgKz0gdGhpcy5wYWdlU2l6ZSk7XG4gICAgdGhpcy50cmlnZ2VyKFwicGFnZVNob3duXCIsIGFyZ3MpO1xuICB9XG5cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
