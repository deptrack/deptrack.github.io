/// <amd-dependency path="text!../template/dependencylist.html" />
/// <amd-dependency path="text!../template/dependencylist-item.html" />
/// <amd-dependency path="bootstrap" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports", "backbone", "handlebars", "clipboard", "text!../template/dependencylist.html", "text!../template/dependencylist-item.html", "bootstrap"], function (require, exports, Backbone, Handlebars, Clipboard) {
    var itemTemplate = Handlebars.compile(require("text!../template/dependencylist-item.html"));
    var template = Handlebars.compile(require("text!../template/dependencylist.html"));
    var DependencyListView = (function (_super) {
        __extends(DependencyListView, _super);
        function DependencyListView(model) {
            _super.call(this, { model: model });
            this.template = template;
            model.on("change:dirty", this.toggleDisabled.bind(this));
        }
        DependencyListView.prototype.events = function () {
            return {
                "click .btn-reset": "resetVersions",
                "click .btn-view-packagejson": "viewPackageJson",
                "click #dlg-package-json .btn-close": "hidePackageJson"
            };
        };
        DependencyListView.prototype.resetVersions = function () {
            this.model.reset();
        };
        DependencyListView.prototype.dlgPackageJson = function () {
            return this.$("#dlg-package-json");
        };
        DependencyListView.prototype.viewPackageJson = function () {
            _paq.push(['trackEvent', 'User', 'ViewMyUpdateDep']);
            this.dlgPackageJson().modal();
            this.dlgPackageJson().find("textarea").val(this.model.formattedPackageJson);
            new Clipboard("#dlg-package-json .btn-clipboard");
        };
        DependencyListView.prototype.hidePackageJson = function () {
            this.dlgPackageJson().modal("hide");
        };
        DependencyListView.prototype.toggleDisabled = function (model) {
            if (model.dirty) {
                this.$(".btn-view-packagejson").removeClass("disabled");
            }
            else {
                this.$(".btn-view-packagejson").addClass("disabled");
            }
        };
        DependencyListView.prototype.render = function () {
            this.$el.html(this.template({
                project: this.model
            }));
            var $listGroup = this.$el.find(".list-group");
            this.model.dependencies.each(function (dep) { return new DependencyView(dep).render().$el.appendTo($listGroup); });
            this.toggleDisabled(this.model);
            return this;
        };
        return DependencyListView;
    })(Backbone.View);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = DependencyListView;
    var DependencyView = (function (_super) {
        __extends(DependencyView, _super);
        function DependencyView(model) {
            _super.call(this, {
                model: model,
                tagName: "span",
                className: "list-group-item"
            });
            this.template = itemTemplate;
            this.opened = false;
            this.popover = false;
            this.tooltip = false;
            this.listenTo(this.model, "change", this.render);
        }
        DependencyView.prototype.events = function () {
            return {
                "change select": "changeCurrentVersion",
                "click .cnt-versionlist li": "changeCurrentVersion",
                "click": "toggleVersionList",
            };
        };
        DependencyView.prototype.toggleVersionList = function () {
            if (this.model.isObsolete) {
                if (this.opened) {
                    this.$(".cnt-versionlist").hide();
                }
                else {
                    this.$(".cnt-versionlist").show();
                }
                this.opened = !this.opened;
            }
        };
        DependencyView.prototype.setupPopover = function () {
            if (this.tooltip) {
                this.$el.tooltip("destroy");
                this.tooltip = false;
            }
            this.$el.attr({
                "data-toggle": "popover",
                "data-trigger": "hover",
                "data-content": "Click to select newer version",
                "data-placement": "top"
            });
            this.$el.popover();
            this.popover = true;
        };
        DependencyView.prototype.setupTooltip = function () {
            if (this.popover) {
                this.$el.popover("destroy");
                this.popover = false;
            }
            if (this.tooltip) {
                this.$el.tooltip("destroy");
            }
            this.$el.tooltip({
                html: true,
                placement: "top",
                animation: false,
                title: "You chose to upgrade to <span class='txt-hover-ok'>" + this.model.currentVersion.versionString + "</span>"
            });
            this.tooltip = true;
        };
        DependencyView.prototype.changeCurrentVersion = function (event) {
            this.opened = false;
            this.model.setCurrentVersion($(event.target).attr("value"));
            event.stopPropagation();
        };
        DependencyView.prototype.render = function (model) {
            if (model === void 0) { model = this.model; }
            this.$el.html(this.template(model));
            this.$(".lbl-dirty").css("visibility", this.model.dirty ? "visible" : "hidden");
            if (this.model.dirty) {
                this.$el.popover("destroy");
                this.setupTooltip();
            }
            else if (this.model.isObsolete) {
                this.$el.tooltip("destroy");
                this.setupPopover();
            }
            return this;
        };
        return DependencyView;
    })(Backbone.View);
    exports.DependencyView = DependencyView;
});

//# sourceMappingURL=data:application/json;base64,
