var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports", "backbone", "handlebars", "../AppInitProcess", "./ProgressBarView", "../model/NotificationArea", "./LayoutView", "./DependencyListView", "./NotificationAreaView", "./NewsfeedView", "../model/NewsfeedLoading", "text!../template/launcher.html"], function (require, exports, Backbone, Handlebars, AppInitProcess_1, ProgressBarView_1, NotificationArea_1, LayoutView_1, DependencyListView_1, NotificationAreaView_1, NewsfeedView_1, NewsfeedLoading_1) {
    var template = Handlebars.compile(require("text!../template/launcher.html"));
    function removeLauncherCss() {
        var linkTags = document.getElementsByTagName("link");
        for (var i in linkTags) {
            var tag = linkTags[i];
            if ($(tag).attr("href") == "css/launcher.css") {
                $(tag).remove();
                break;
            }
        }
    }
    var AppInitView = (function (_super) {
        __extends(AppInitView, _super);
        function AppInitView(el, onUrl, onRawJson) {
            if (onUrl === void 0) { onUrl = AppInitProcess_1.AppInitProcess.startWithUrl; }
            if (onRawJson === void 0) { onRawJson = AppInitProcess_1.AppInitProcess.startWithPackageJson; }
            _super.call(this, { el: el });
            this.onUrl = onUrl;
            this.onRawJson = onRawJson;
            this.template = template;
            this.selectedUrl = "https://raw.githubusercontent.com/vuejs/vue/dev/package.json";
        }
        AppInitView.prototype.npmFetchStarted = function (progress) {
            this.$el.empty();
            new ProgressBarView_1.default(progress, "fetching dependencies from npm... ").render().$el.appendTo(this.$el);
        };
        AppInitView.prototype.npmFetchFinished = function (project) {
            removeLauncherCss();
            var notifModel = new NotificationArea_1.default();
            var layout = new LayoutView_1.default(document.getElementsByTagName("body")[0], notifModel);
            layout.render();
            var depList = new DependencyListView_1.default(project);
            layout.setLeftPane(depList.render());
            var notifAreaView = new NotificationAreaView_1.default(notifModel);
            notifAreaView.render().$el.appendTo("body");
            var newsfeedLoading = new NewsfeedLoading_1.default(project.dependencies.toArray());
            layout.setCenterPane(new ProgressBarView_1.default(newsfeedLoading.progress).render());
            newsfeedLoading
                .then(function (newsfeed) { return new NewsfeedView_1.default(newsfeed); })
                .then(function (view) { return layout.setCenterPane(view.render()); });
        };
        AppInitView.prototype.events = function () {
            return {
                "click div.select": "showOptions",
                "blur div.select": "hideOptions",
                "click li.option": "selectOption",
                "click .btn-launch": "startWithUrl",
                "click .btn-launch-customproject": "startWithPackageJson"
            };
        };
        AppInitView.prototype.startWithUrl = function () {
            this.startInitProcess(this.onUrl(this.selectedUrl));
        };
        AppInitView.prototype.startWithPackageJson = function () {
            this.startInitProcess(this.onRawJson(this.$("#txt-packagejson-text").val()));
        };
        AppInitView.prototype.startInitProcess = function (process) {
            var _this = this;
            process.addInitListener(this).init().catch(function (err) { return _this.showError(err); });
        };
        AppInitView.prototype.showError = function (err) {
            this.$(".error").css("visibility", "visible");
            this.$(".error").html(err);
        };
        AppInitView.prototype.$options = function () {
            return this.$("li.option");
        };
        AppInitView.prototype.selectOption = function (event) {
            this.hideOptions();
            this.$("span").html(event.target.innerHTML.trim());
            this.selectedUrl = event.target.getAttribute("value");
            event.stopPropagation();
        };
        AppInitView.prototype.showOptions = function () {
            this.$options().css("display", "inline-block");
        };
        AppInitView.prototype.hideOptions = function () {
            this.$options().css("display", "none");
        };
        AppInitView.prototype.render = function () {
            this.$el.html(this.template({}));
            return this;
        };
        return AppInitView;
    })(Backbone.View);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = AppInitView;
});

//# sourceMappingURL=data:application/json;base64,
