/// <amd-dependency path="promise" />
define(["require", "exports", "promise"], function (require, exports) {
    var PromiseCompletion = (function () {
        function PromiseCompletion(promises) {
            var _this = this;
            this.promises = promises;
            this.successResults = [];
            this.failureResults = [];
            this.mappers = [];
            this.failureHandlers = [];
            this.nextPromises = [];
            this.resolvers = [];
            this.rejectors = [];
            _.each(promises, function (p) { return _this.installListeners(p); });
        }
        PromiseCompletion.waitFor = function (promises) {
            return new PromiseCompletion(promises);
        };
        PromiseCompletion.prototype.installListeners = function (promise) {
            var _this = this;
            promise.then(function (result) {
                _this.successResults.push(result);
                _this.checkIfThereIsPendingPromise();
            }).catch(function (f) {
                _this.failureResults.push(f);
                _this.checkIfThereIsPendingPromise();
            });
        };
        PromiseCompletion.prototype.checkIfThereIsPendingPromise = function () {
            if (this.successResults.length + this.failureResults.length === this.promises.length) {
                this.triggerSuccesses();
                if (this.hasFailures()) {
                    this.triggerFailures();
                }
            }
        };
        PromiseCompletion.prototype.triggerFailures = function () {
            var _this = this;
            this.failureHandlers.forEach(function (handler) {
                handler(_this.failureResults);
            });
            this.rejectors.forEach(function (rejector) { return rejector(_this.failureResults); });
        };
        PromiseCompletion.prototype.triggerSuccesses = function () {
            var _this = this;
            this.mappers.forEach(function (mapper) {
                try {
                    var mapped = mapper(_this.successResults);
                    _.each(_this.resolvers, function (resolver) { return resolver(mapped); });
                }
                catch (e) {
                    _this.rejectors.forEach(function (rejector) { return rejector(e); });
                }
            });
        };
        PromiseCompletion.prototype.then = function (mapper) {
            var _this = this;
            this.mappers.push(mapper);
            var rval = new Promise(function (resolve, reject) {
                _this.resolvers.push(resolve);
                _this.rejectors.push(reject);
            });
            this.nextPromises.push(rval);
            this.checkIfThereIsPendingPromise();
            return rval;
        };
        PromiseCompletion.prototype.catch = function (onRejected) {
            this.failureHandlers.push(onRejected);
            return this;
        };
        PromiseCompletion.prototype.hasFailures = function () {
            return this.failureResults.length > 0;
        };
        return PromiseCompletion;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = PromiseCompletion;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4vbW9kZWwvUHJvbWlzZUNvbXBsZXRpb24udHMiXSwibmFtZXMiOlsiUHJvbWlzZUNvbXBsZXRpb24iLCJQcm9taXNlQ29tcGxldGlvbi5jb25zdHJ1Y3RvciIsIlByb21pc2VDb21wbGV0aW9uLndhaXRGb3IiLCJQcm9taXNlQ29tcGxldGlvbi5pbnN0YWxsTGlzdGVuZXJzIiwiUHJvbWlzZUNvbXBsZXRpb24uY2hlY2tJZlRoZXJlSXNQZW5kaW5nUHJvbWlzZSIsIlByb21pc2VDb21wbGV0aW9uLnRyaWdnZXJGYWlsdXJlcyIsIlByb21pc2VDb21wbGV0aW9uLnRyaWdnZXJTdWNjZXNzZXMiLCJQcm9taXNlQ29tcGxldGlvbi50aGVuIiwiUHJvbWlzZUNvbXBsZXRpb24uY2F0Y2giLCJQcm9taXNlQ29tcGxldGlvbi5oYXNGYWlsdXJlcyJdLCJtYXBwaW5ncyI6IkFBQUEscUNBQXFDOztJQU9yQztRQU1FQSwyQkFBb0JBLFFBQXFDQTtZQU4zREMsaUJBcUZDQTtZQS9FcUJBLGFBQVFBLEdBQVJBLFFBQVFBLENBQTZCQTtZQUlqREEsbUJBQWNBLEdBQWFBLEVBQUVBLENBQUNBO1lBRTlCQSxtQkFBY0EsR0FBVUEsRUFBRUEsQ0FBQ0E7WUFFM0JBLFlBQU9BLEdBQTBCQSxFQUFFQSxDQUFDQTtZQUVwQ0Esb0JBQWVBLEdBQW9CQSxFQUFFQSxDQUFDQTtZQUV0Q0EsaUJBQVlBLEdBQTZCQSxFQUFFQSxDQUFDQTtZQUU1Q0EsY0FBU0EsR0FBeUJBLEVBQUVBLENBQUNBO1lBRXJDQSxjQUFTQSxHQUE4QkEsRUFBRUEsQ0FBQ0E7WUFmaERBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLFVBQUFBLENBQUNBLElBQUlBLE9BQUFBLEtBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBeEJBLENBQXdCQSxDQUFDQSxDQUFDQTtRQUNsREEsQ0FBQ0E7UUFOYUQseUJBQU9BLEdBQXJCQSxVQUF5QkEsUUFBcUNBO1lBQzVE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LE1BQTBCQTtnQkFFMUJBLEtBQUlBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO2dCQUM3QkEsS0FBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDOUJBLENBQUNBLENBQUNBLENBQUNBO1lBQ0hBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQzdCQSxJQUFJQSxDQUFDQSw0QkFBNEJBLEVBQUVBLENBQUNBO1lBQ3BDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNkQSxDQUFDQTtRQUVNUCxpQ0FBS0EsR0FBWkEsVUFBYUEsVUFBNENBO1lBQ3ZEUSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtZQUN0Q0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDZEEsQ0FBQ0E7UUFFTVIsdUNBQVdBLEdBQWxCQTtZQUNFUyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN4Q0EsQ0FBQ0E7UUFHSFQsd0JBQUNBO0lBQURBLENBckZBLEFBcUZDQSxJQUFBO0lBckZEO3VDQXFGQyxDQUFBIiwiZmlsZSI6Im1haW4vbW9kZWwvUHJvbWlzZUNvbXBsZXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPGFtZC1kZXBlbmRlbmN5IHBhdGg9XCJwcm9taXNlXCIgLz5cblxuXG5pbXBvcnQgSVRoZW5hYmxlID0gUHJvbWlzZS5JVGhlbmFibGU7XG50eXBlIEJhdGNoTWFwcGVyPFQsIFU+ID0gKGFyZzogQXJyYXk8VD4pID0+IFU7XG50eXBlIEVycm9ySGFuZGxlciA9IChlcnI6IGFueSkgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvbWlzZUNvbXBsZXRpb248VD4ge1xuXG4gIHB1YmxpYyBzdGF0aWMgd2FpdEZvcjxUPihwcm9taXNlczogQXJyYXk8UHJvbWlzZS5JVGhlbmFibGU8VD4+KSA6IFByb21pc2VDb21wbGV0aW9uPFQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2VDb21wbGV0aW9uKHByb21pc2VzKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvbWlzZXM6IEFycmF5PFByb21pc2UuSVRoZW5hYmxlPFQ+Pikge1xuICAgIF8uZWFjaChwcm9taXNlcywgcCA9PiB0aGlzLmluc3RhbGxMaXN0ZW5lcnMocCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdWNjZXNzUmVzdWx0czogQXJyYXk8VD4gPSBbXTtcblxuICBwcml2YXRlIGZhaWx1cmVSZXN1bHRzOiBhbnlbXSA9IFtdO1xuXG4gIHByaXZhdGUgbWFwcGVyczogQmF0Y2hNYXBwZXI8VCwgYW55PltdID0gW107XG5cbiAgcHJpdmF0ZSBmYWlsdXJlSGFuZGxlcnMgOiBFcnJvckhhbmRsZXJbXSA9IFtdO1xuXG4gIHByaXZhdGUgbmV4dFByb21pc2VzOiBQcm9taXNlLklUaGVuYWJsZTxhbnk+W10gPSBbXTtcblxuICBwcml2YXRlIHJlc29sdmVycyA6IEFycmF5PChhbnkpID0+IHZvaWQ+PSBbXTtcblxuICBwcml2YXRlIHJlamVjdG9yczogQXJyYXk8KGVycjogYW55KSA9PiB2b2lkPiA9IFtdO1xuXG4gIHByaXZhdGUgaW5zdGFsbExpc3RlbmVycyhwcm9taXNlOiBQcm9taXNlLklUaGVuYWJsZTxUPikge1xuICAgIHByb21pc2UudGhlbihyZXN1bHQgPT4ge1xuICAgICAgdGhpcy5zdWNjZXNzUmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICB0aGlzLmNoZWNrSWZUaGVyZUlzUGVuZGluZ1Byb21pc2UoKTtcbiAgICB9KS5jYXRjaChmID0+IHtcbiAgICAgIHRoaXMuZmFpbHVyZVJlc3VsdHMucHVzaChmKTtcbiAgICAgIHRoaXMuY2hlY2tJZlRoZXJlSXNQZW5kaW5nUHJvbWlzZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0lmVGhlcmVJc1BlbmRpbmdQcm9taXNlKCkge1xuICAgIGlmICh0aGlzLnN1Y2Nlc3NSZXN1bHRzLmxlbmd0aCArIHRoaXMuZmFpbHVyZVJlc3VsdHMubGVuZ3RoID09PSB0aGlzLnByb21pc2VzLmxlbmd0aCkge1xuICAgICAgdGhpcy50cmlnZ2VyU3VjY2Vzc2VzKCk7XG4gICAgICBpZiAodGhpcy5oYXNGYWlsdXJlcygpKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlckZhaWx1cmVzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0cmlnZ2VyRmFpbHVyZXMoKSB7XG4gICAgdGhpcy5mYWlsdXJlSGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IHtcbiAgICAgIGhhbmRsZXIodGhpcy5mYWlsdXJlUmVzdWx0cyk7XG4gICAgfSk7XG4gICAgdGhpcy5yZWplY3RvcnMuZm9yRWFjaChyZWplY3RvciA9PiByZWplY3Rvcih0aGlzLmZhaWx1cmVSZXN1bHRzKSk7XG4gIH1cblxuICBwcml2YXRlIHRyaWdnZXJTdWNjZXNzZXMoKSB7XG4gICAgdGhpcy5tYXBwZXJzLmZvckVhY2gobWFwcGVyID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1hcHBlZCA9IG1hcHBlcih0aGlzLnN1Y2Nlc3NSZXN1bHRzKTtcbiAgICAgICAgXy5lYWNoKHRoaXMucmVzb2x2ZXJzLCByZXNvbHZlciA9PiByZXNvbHZlcihtYXBwZWQpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhpcy5yZWplY3RvcnMuZm9yRWFjaChyZWplY3RvciA9PiByZWplY3RvcihlKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgdGhlbjxVPihtYXBwZXI6IEJhdGNoTWFwcGVyPFQsIFU+KTogUHJvbWlzZS5JVGhlbmFibGU8VT4ge1xuICAgIHRoaXMubWFwcGVycy5wdXNoKG1hcHBlcik7XG4gICAgdmFyIHJ2YWwgPSBuZXcgUHJvbWlzZTxVPigoXG4gICAgICByZXNvbHZlOiAodmFsOiBVKSA9PiB2b2lkLFxuICAgICAgcmVqZWN0OiAoZXJyOiBhbnkpID0+IHZvaWRcbiAgICApID0+IHtcbiAgICAgIHRoaXMucmVzb2x2ZXJzLnB1c2gocmVzb2x2ZSk7XG4gICAgICB0aGlzLnJlamVjdG9ycy5wdXNoKHJlamVjdCk7XG4gICAgfSk7XG4gICAgdGhpcy5uZXh0UHJvbWlzZXMucHVzaChydmFsKTtcbiAgICB0aGlzLmNoZWNrSWZUaGVyZUlzUGVuZGluZ1Byb21pc2UoKTtcbiAgICByZXR1cm4gcnZhbDtcbiAgfVxuXG4gIHB1YmxpYyBjYXRjaChvblJlamVjdGVkOiAoZXJyb3I6IGFueSkgPT4gSVRoZW5hYmxlPFQ+IHwgVCk6IFByb21pc2VDb21wbGV0aW9uPFQ+IHtcbiAgICB0aGlzLmZhaWx1cmVIYW5kbGVycy5wdXNoKG9uUmVqZWN0ZWQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIGhhc0ZhaWx1cmVzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmZhaWx1cmVSZXN1bHRzLmxlbmd0aCA+IDA7XG4gIH1cblxuXG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
