/// <amd-dependency path="promise" />
define(["require", "exports", "./ProgressIndicator", "promise"], function (require, exports, ProgressIndicator_1) {
    var PromiseCompletion = (function () {
        function PromiseCompletion(promises, progress) {
            var _this = this;
            if (progress === void 0) { progress = ProgressIndicator_1.NO_PROGRESS; }
            this.promises = promises;
            this.progress = progress;
            this.successResults = [];
            this.failureResults = [];
            this.mappers = [];
            this.failureHandlers = [];
            this.nextPromises = [];
            this.resolvers = [];
            this.rejectors = [];
            progress.setTotalStepCount(promises.length);
            _.each(promises, function (p) { return _this.installListeners(p); });
        }
        PromiseCompletion.waitFor = function (promises, progress) {
            if (progress === void 0) { progress = ProgressIndicator_1.NO_PROGRESS; }
            return new PromiseCompletion(promises, progress);
        };
        PromiseCompletion.prototype.installListeners = function (promise) {
            var _this = this;
            promise.then(function (result) {
                _this.progress.tick();
                _this.successResults.push(result);
                _this.checkIfThereIsPendingPromise();
            }).catch(function (f) {
                _this.progress.tick();
                _this.failureResults.push(f);
                _this.checkIfThereIsPendingPromise();
            });
        };
        PromiseCompletion.prototype.checkIfThereIsPendingPromise = function () {
            if (this.successResults.length + this.failureResults.length === this.promises.length) {
                this.triggerSuccesses();
                if (this.hasFailures()) {
                    this.triggerFailures();
                }
            }
        };
        PromiseCompletion.prototype.triggerFailures = function () {
            var _this = this;
            this.failureHandlers.forEach(function (handler) {
                handler(_this.failureResults);
            });
            this.rejectors.forEach(function (rejector) { return rejector(_this.failureResults); });
        };
        PromiseCompletion.prototype.triggerSuccesses = function () {
            var _this = this;
            this.mappers.forEach(function (mapper) {
                try {
                    var mapped = mapper(_this.successResults);
                    _.each(_this.resolvers, function (resolver) { return resolver(mapped); });
                }
                catch (e) {
                    _this.rejectors.forEach(function (rejector) { return rejector(e); });
                }
            });
        };
        PromiseCompletion.prototype.then = function (mapper) {
            var _this = this;
            this.mappers.push(mapper);
            var rval = new Promise(function (resolve, reject) {
                _this.resolvers.push(resolve);
                _this.rejectors.push(reject);
            });
            this.nextPromises.push(rval);
            this.checkIfThereIsPendingPromise();
            return rval;
        };
        PromiseCompletion.prototype.catch = function (onRejected) {
            this.failureHandlers.push(onRejected);
            return this;
        };
        PromiseCompletion.prototype.hasFailures = function () {
            return this.failureResults.length > 0;
        };
        return PromiseCompletion;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = PromiseCompletion;
});

//# sourceMappingURL=data:application/json;base64,
